{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.preKeyupBehavior = exports.preKeydownBehavior = exports.postKeyupBehavior = exports.keyupBehavior = exports.keypressBehavior = exports.keydownBehavior = void 0;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _utils = require(\"../../utils\");\n\nvar _getEventProps = require(\"../getEventProps\");\n\nvar _shared = require(\"../shared\");\n/**\n * This file should contain behavior for functional keys as described here:\n * https://w3c.github.io/uievents-code/#key-alphanumeric-functional\n */\n\n\nconst modifierKeys = {\n  Alt: 'alt',\n  Control: 'ctrl',\n  Shift: 'shift',\n  Meta: 'meta'\n};\nconst preKeydownBehavior = [// modifierKeys switch on the modifier BEFORE the keydown event\n...Object.entries(modifierKeys).map(_ref => {\n  let [key, modKey] = _ref;\n  return {\n    matches: keyDef => keyDef.key === key,\n    handle: (keyDef, element, options, state) => {\n      state.modifiers[modKey] = true;\n    }\n  };\n}), // AltGraph produces an extra keydown for Control\n// The modifier does not change\n{\n  matches: keyDef => keyDef.key === 'AltGraph',\n  handle: (keyDef, element, options, state) => {\n    var _options$keyboardMap$;\n\n    const ctrlKeyDef = (_options$keyboardMap$ = options.keyboardMap.find(k => k.key === 'Control')) != null ? _options$keyboardMap$ :\n    /* istanbul ignore next */\n    {\n      key: 'Control',\n      code: 'Control'\n    };\n\n    _dom.fireEvent.keyDown(element, (0, _getEventProps.getKeyEventProps)(ctrlKeyDef, state));\n  }\n}];\nexports.preKeydownBehavior = preKeydownBehavior;\nconst keydownBehavior = [{\n  matches: keyDef => keyDef.key === 'CapsLock',\n  handle: (keyDef, element, options, state) => {\n    state.modifiers.caps = !state.modifiers.caps;\n  }\n}, {\n  matches: (keyDef, element) => keyDef.key === 'Backspace' && (0, _utils.isEditable)(element) && !(0, _utils.isCursorAtStart)(element),\n  handle: (keyDef, element, options, state) => {\n    const {\n      newValue,\n      newSelectionStart\n    } = (0, _utils.calculateNewValue)('', element, state.carryValue, undefined, 'backward');\n    (0, _shared.fireInputEvent)(element, {\n      newValue,\n      newSelectionStart,\n      eventOverrides: {\n        inputType: 'deleteContentBackward'\n      }\n    });\n    (0, _shared.carryValue)(element, state, newValue);\n  }\n}];\nexports.keydownBehavior = keydownBehavior;\nconst keypressBehavior = [{\n  matches: (keyDef, element) => keyDef.key === 'Enter' && (0, _utils.isElementType)(element, 'input') && ['checkbox', 'radio'].includes(element.type),\n  handle: (keyDef, element) => {\n    const form = element.form;\n\n    if ((0, _utils.hasFormSubmit)(form)) {\n      _dom.fireEvent.submit(form);\n    }\n  }\n}, {\n  matches: (keyDef, element) => keyDef.key === 'Enter' && ((0, _utils.isClickableInput)(element) || // Links with href defined should handle Enter the same as a click\n  (0, _utils.isElementType)(element, 'a') && Boolean(element.href)),\n  handle: (keyDef, element, options, state) => {\n    _dom.fireEvent.click(element, (0, _getEventProps.getMouseEventProps)(state));\n  }\n}, {\n  matches: (keyDef, element) => keyDef.key === 'Enter' && (0, _utils.isElementType)(element, 'input'),\n  handle: (keyDef, element) => {\n    const form = element.form;\n\n    if (form && (form.querySelectorAll('input').length === 1 || (0, _utils.hasFormSubmit)(form))) {\n      _dom.fireEvent.submit(form);\n    }\n  }\n}];\nexports.keypressBehavior = keypressBehavior;\nconst preKeyupBehavior = [// modifierKeys switch off the modifier BEFORE the keyup event\n...Object.entries(modifierKeys).map(_ref2 => {\n  let [key, modKey] = _ref2;\n  return {\n    matches: keyDef => keyDef.key === key,\n    handle: (keyDef, element, options, state) => {\n      state.modifiers[modKey] = false;\n    }\n  };\n})];\nexports.preKeyupBehavior = preKeyupBehavior;\nconst keyupBehavior = [{\n  matches: (keyDef, element) => keyDef.key === ' ' && (0, _utils.isClickableInput)(element),\n  handle: (keyDef, element, options, state) => {\n    _dom.fireEvent.click(element, (0, _getEventProps.getMouseEventProps)(state));\n  }\n}];\nexports.keyupBehavior = keyupBehavior;\nconst postKeyupBehavior = [// AltGraph produces an extra keyup for Control\n// The modifier does not change\n{\n  matches: keyDef => keyDef.key === 'AltGraph',\n  handle: (keyDef, element, options, state) => {\n    var _options$keyboardMap$2;\n\n    const ctrlKeyDef = (_options$keyboardMap$2 = options.keyboardMap.find(k => k.key === 'Control')) != null ? _options$keyboardMap$2 :\n    /* istanbul ignore next */\n    {\n      key: 'Control',\n      code: 'Control'\n    };\n\n    _dom.fireEvent.keyUp(element, (0, _getEventProps.getKeyEventProps)(ctrlKeyDef, state));\n  }\n}];\nexports.postKeyupBehavior = postKeyupBehavior;","map":{"version":3,"sources":["C:/Users/HP/my-ppp/node_modules/@testing-library/user-event/dist/keyboard/plugins/functional.js"],"names":["Object","defineProperty","exports","value","preKeyupBehavior","preKeydownBehavior","postKeyupBehavior","keyupBehavior","keypressBehavior","keydownBehavior","_dom","require","_utils","_getEventProps","_shared","modifierKeys","Alt","Control","Shift","Meta","entries","map","key","modKey","matches","keyDef","handle","element","options","state","modifiers","_options$keyboardMap$","ctrlKeyDef","keyboardMap","find","k","code","fireEvent","keyDown","getKeyEventProps","caps","isEditable","isCursorAtStart","newValue","newSelectionStart","calculateNewValue","carryValue","undefined","fireInputEvent","eventOverrides","inputType","isElementType","includes","type","form","hasFormSubmit","submit","isClickableInput","Boolean","href","click","getMouseEventProps","querySelectorAll","length","_options$keyboardMap$2","keyUp"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.preKeyupBehavior = exports.preKeydownBehavior = exports.postKeyupBehavior = exports.keyupBehavior = exports.keypressBehavior = exports.keydownBehavior = void 0;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _utils = require(\"../../utils\");\n\nvar _getEventProps = require(\"../getEventProps\");\n\nvar _shared = require(\"../shared\");\n\n/**\n * This file should contain behavior for functional keys as described here:\n * https://w3c.github.io/uievents-code/#key-alphanumeric-functional\n */\nconst modifierKeys = {\n  Alt: 'alt',\n  Control: 'ctrl',\n  Shift: 'shift',\n  Meta: 'meta'\n};\nconst preKeydownBehavior = [// modifierKeys switch on the modifier BEFORE the keydown event\n...Object.entries(modifierKeys).map(([key, modKey]) => ({\n  matches: keyDef => keyDef.key === key,\n  handle: (keyDef, element, options, state) => {\n    state.modifiers[modKey] = true;\n  }\n})), // AltGraph produces an extra keydown for Control\n// The modifier does not change\n{\n  matches: keyDef => keyDef.key === 'AltGraph',\n  handle: (keyDef, element, options, state) => {\n    var _options$keyboardMap$;\n\n    const ctrlKeyDef = (_options$keyboardMap$ = options.keyboardMap.find(k => k.key === 'Control')) != null ? _options$keyboardMap$ :\n    /* istanbul ignore next */\n    {\n      key: 'Control',\n      code: 'Control'\n    };\n\n    _dom.fireEvent.keyDown(element, (0, _getEventProps.getKeyEventProps)(ctrlKeyDef, state));\n  }\n}];\nexports.preKeydownBehavior = preKeydownBehavior;\nconst keydownBehavior = [{\n  matches: keyDef => keyDef.key === 'CapsLock',\n  handle: (keyDef, element, options, state) => {\n    state.modifiers.caps = !state.modifiers.caps;\n  }\n}, {\n  matches: (keyDef, element) => keyDef.key === 'Backspace' && (0, _utils.isEditable)(element) && !(0, _utils.isCursorAtStart)(element),\n  handle: (keyDef, element, options, state) => {\n    const {\n      newValue,\n      newSelectionStart\n    } = (0, _utils.calculateNewValue)('', element, state.carryValue, undefined, 'backward');\n    (0, _shared.fireInputEvent)(element, {\n      newValue,\n      newSelectionStart,\n      eventOverrides: {\n        inputType: 'deleteContentBackward'\n      }\n    });\n    (0, _shared.carryValue)(element, state, newValue);\n  }\n}];\nexports.keydownBehavior = keydownBehavior;\nconst keypressBehavior = [{\n  matches: (keyDef, element) => keyDef.key === 'Enter' && (0, _utils.isElementType)(element, 'input') && ['checkbox', 'radio'].includes(element.type),\n  handle: (keyDef, element) => {\n    const form = element.form;\n\n    if ((0, _utils.hasFormSubmit)(form)) {\n      _dom.fireEvent.submit(form);\n    }\n  }\n}, {\n  matches: (keyDef, element) => keyDef.key === 'Enter' && ((0, _utils.isClickableInput)(element) || // Links with href defined should handle Enter the same as a click\n  (0, _utils.isElementType)(element, 'a') && Boolean(element.href)),\n  handle: (keyDef, element, options, state) => {\n    _dom.fireEvent.click(element, (0, _getEventProps.getMouseEventProps)(state));\n  }\n}, {\n  matches: (keyDef, element) => keyDef.key === 'Enter' && (0, _utils.isElementType)(element, 'input'),\n  handle: (keyDef, element) => {\n    const form = element.form;\n\n    if (form && (form.querySelectorAll('input').length === 1 || (0, _utils.hasFormSubmit)(form))) {\n      _dom.fireEvent.submit(form);\n    }\n  }\n}];\nexports.keypressBehavior = keypressBehavior;\nconst preKeyupBehavior = [// modifierKeys switch off the modifier BEFORE the keyup event\n...Object.entries(modifierKeys).map(([key, modKey]) => ({\n  matches: keyDef => keyDef.key === key,\n  handle: (keyDef, element, options, state) => {\n    state.modifiers[modKey] = false;\n  }\n}))];\nexports.preKeyupBehavior = preKeyupBehavior;\nconst keyupBehavior = [{\n  matches: (keyDef, element) => keyDef.key === ' ' && (0, _utils.isClickableInput)(element),\n  handle: (keyDef, element, options, state) => {\n    _dom.fireEvent.click(element, (0, _getEventProps.getMouseEventProps)(state));\n  }\n}];\nexports.keyupBehavior = keyupBehavior;\nconst postKeyupBehavior = [// AltGraph produces an extra keyup for Control\n// The modifier does not change\n{\n  matches: keyDef => keyDef.key === 'AltGraph',\n  handle: (keyDef, element, options, state) => {\n    var _options$keyboardMap$2;\n\n    const ctrlKeyDef = (_options$keyboardMap$2 = options.keyboardMap.find(k => k.key === 'Control')) != null ? _options$keyboardMap$2 :\n    /* istanbul ignore next */\n    {\n      key: 'Control',\n      code: 'Control'\n    };\n\n    _dom.fireEvent.keyUp(element, (0, _getEventProps.getKeyEventProps)(ctrlKeyDef, state));\n  }\n}];\nexports.postKeyupBehavior = postKeyupBehavior;"]},"metadata":{},"sourceType":"script"}