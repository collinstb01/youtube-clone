{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyboard = keyboard;\nexports.keyboardImplementationWrapper = keyboardImplementationWrapper;\nObject.defineProperty(exports, \"specialCharMap\", {\n  enumerable: true,\n  get: function () {\n    return _specialCharMap.specialCharMap;\n  }\n});\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _keyboardImplementation = require(\"./keyboardImplementation\");\n\nvar _keyMap = require(\"./keyMap\");\n\nvar _specialCharMap = require(\"./specialCharMap\");\n\nfunction keyboard(text, options) {\n  var _options$delay;\n\n  const {\n    promise,\n    state\n  } = keyboardImplementationWrapper(text, options);\n\n  if (((_options$delay = options == null ? void 0 : options.delay) != null ? _options$delay : 0) > 0) {\n    return (0, _dom.getConfig)().asyncWrapper(() => promise.then(() => state));\n  } else {\n    // prevent users from dealing with UnhandledPromiseRejectionWarning in sync call\n    promise.catch(console.error);\n    return state;\n  }\n}\n\nfunction keyboardImplementationWrapper(text) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    keyboardState: state = createKeyboardState(),\n    delay = 0,\n    document: doc = document,\n    autoModify = false,\n    keyboardMap = _keyMap.defaultKeyMap\n  } = config;\n  const options = {\n    delay,\n    document: doc,\n    autoModify,\n    keyboardMap\n  };\n  return {\n    promise: (0, _keyboardImplementation.keyboardImplementation)(text, options, state),\n    state,\n    releaseAllKeys: () => (0, _keyboardImplementation.releaseAllKeys)(options, state)\n  };\n}\n\nfunction createKeyboardState() {\n  return {\n    activeElement: null,\n    pressed: [],\n    carryChar: '',\n    modifiers: {\n      alt: false,\n      caps: false,\n      ctrl: false,\n      meta: false,\n      shift: false\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/HP/my-ppp/node_modules/@testing-library/user-event/dist/keyboard/index.js"],"names":["Object","defineProperty","exports","value","keyboard","keyboardImplementationWrapper","enumerable","get","_specialCharMap","specialCharMap","_dom","require","_keyboardImplementation","_keyMap","text","options","_options$delay","promise","state","delay","getConfig","asyncWrapper","then","catch","console","error","config","keyboardState","createKeyboardState","document","doc","autoModify","keyboardMap","defaultKeyMap","keyboardImplementation","releaseAllKeys","activeElement","pressed","carryChar","modifiers","alt","caps","ctrl","meta","shift"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,QAAR,GAAmBA,QAAnB;AACAF,OAAO,CAACG,6BAAR,GAAwCA,6BAAxC;AACAL,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,gBAA/B,EAAiD;AAC/CI,EAAAA,UAAU,EAAE,IADmC;AAE/CC,EAAAA,GAAG,EAAE,YAAY;AACf,WAAOC,eAAe,CAACC,cAAvB;AACD;AAJ8C,CAAjD;;AAOA,IAAIC,IAAI,GAAGC,OAAO,CAAC,sBAAD,CAAlB;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAAD,CAArC;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAIH,eAAe,GAAGG,OAAO,CAAC,kBAAD,CAA7B;;AAEA,SAASP,QAAT,CAAkBU,IAAlB,EAAwBC,OAAxB,EAAiC;AAC/B,MAAIC,cAAJ;;AAEA,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA;AAFI,MAGFb,6BAA6B,CAACS,IAAD,EAAOC,OAAP,CAHjC;;AAKA,MAAI,CAAC,CAACC,cAAc,GAAGD,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACI,KAArD,KAA+D,IAA/D,GAAsEH,cAAtE,GAAuF,CAAxF,IAA6F,CAAjG,EAAoG;AAClG,WAAO,CAAC,GAAGN,IAAI,CAACU,SAAT,IAAsBC,YAAtB,CAAmC,MAAMJ,OAAO,CAACK,IAAR,CAAa,MAAMJ,KAAnB,CAAzC,CAAP;AACD,GAFD,MAEO;AACL;AACAD,IAAAA,OAAO,CAACM,KAAR,CAAcC,OAAO,CAACC,KAAtB;AACA,WAAOP,KAAP;AACD;AACF;;AAED,SAASb,6BAAT,CAAuCS,IAAvC,EAA0D;AAAA,MAAbY,MAAa,uEAAJ,EAAI;AACxD,QAAM;AACJC,IAAAA,aAAa,EAAET,KAAK,GAAGU,mBAAmB,EADtC;AAEJT,IAAAA,KAAK,GAAG,CAFJ;AAGJU,IAAAA,QAAQ,EAAEC,GAAG,GAAGD,QAHZ;AAIJE,IAAAA,UAAU,GAAG,KAJT;AAKJC,IAAAA,WAAW,GAAGnB,OAAO,CAACoB;AALlB,MAMFP,MANJ;AAOA,QAAMX,OAAO,GAAG;AACdI,IAAAA,KADc;AAEdU,IAAAA,QAAQ,EAAEC,GAFI;AAGdC,IAAAA,UAHc;AAIdC,IAAAA;AAJc,GAAhB;AAMA,SAAO;AACLf,IAAAA,OAAO,EAAE,CAAC,GAAGL,uBAAuB,CAACsB,sBAA5B,EAAoDpB,IAApD,EAA0DC,OAA1D,EAAmEG,KAAnE,CADJ;AAELA,IAAAA,KAFK;AAGLiB,IAAAA,cAAc,EAAE,MAAM,CAAC,GAAGvB,uBAAuB,CAACuB,cAA5B,EAA4CpB,OAA5C,EAAqDG,KAArD;AAHjB,GAAP;AAKD;;AAED,SAASU,mBAAT,GAA+B;AAC7B,SAAO;AACLQ,IAAAA,aAAa,EAAE,IADV;AAELC,IAAAA,OAAO,EAAE,EAFJ;AAGLC,IAAAA,SAAS,EAAE,EAHN;AAILC,IAAAA,SAAS,EAAE;AACTC,MAAAA,GAAG,EAAE,KADI;AAETC,MAAAA,IAAI,EAAE,KAFG;AAGTC,MAAAA,IAAI,EAAE,KAHG;AAITC,MAAAA,IAAI,EAAE,KAJG;AAKTC,MAAAA,KAAK,EAAE;AALE;AAJN,GAAP;AAYD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keyboard = keyboard;\nexports.keyboardImplementationWrapper = keyboardImplementationWrapper;\nObject.defineProperty(exports, \"specialCharMap\", {\n  enumerable: true,\n  get: function () {\n    return _specialCharMap.specialCharMap;\n  }\n});\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _keyboardImplementation = require(\"./keyboardImplementation\");\n\nvar _keyMap = require(\"./keyMap\");\n\nvar _specialCharMap = require(\"./specialCharMap\");\n\nfunction keyboard(text, options) {\n  var _options$delay;\n\n  const {\n    promise,\n    state\n  } = keyboardImplementationWrapper(text, options);\n\n  if (((_options$delay = options == null ? void 0 : options.delay) != null ? _options$delay : 0) > 0) {\n    return (0, _dom.getConfig)().asyncWrapper(() => promise.then(() => state));\n  } else {\n    // prevent users from dealing with UnhandledPromiseRejectionWarning in sync call\n    promise.catch(console.error);\n    return state;\n  }\n}\n\nfunction keyboardImplementationWrapper(text, config = {}) {\n  const {\n    keyboardState: state = createKeyboardState(),\n    delay = 0,\n    document: doc = document,\n    autoModify = false,\n    keyboardMap = _keyMap.defaultKeyMap\n  } = config;\n  const options = {\n    delay,\n    document: doc,\n    autoModify,\n    keyboardMap\n  };\n  return {\n    promise: (0, _keyboardImplementation.keyboardImplementation)(text, options, state),\n    state,\n    releaseAllKeys: () => (0, _keyboardImplementation.releaseAllKeys)(options, state)\n  };\n}\n\nfunction createKeyboardState() {\n  return {\n    activeElement: null,\n    pressed: [],\n    carryChar: '',\n    modifiers: {\n      alt: false,\n      caps: false,\n      ctrl: false,\n      meta: false,\n      shift: false\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}