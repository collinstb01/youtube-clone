{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport request from '../api';\nexport const getYoutubeVideos = createAsyncThunk(\"youtubeapi/getYoutubeVideos\", async _ref => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await request('/videos', {\n      params: {\n        part: 'snippet',\n        maxResults: 20,\n        pageToken: getState().homeVideos.nextPageToken,\n        q: keyword,\n        type: 'video'\n      }\n    });\n    const response = {\n      videos: data.items,\n      nextPageToken: data.nextPageToken,\n      category: 'All'\n    };\n    return response;\n  } catch (err) {\n    return rejectWithValue(err.response.data);\n  }\n});\nconst youtubeSlice = createSlice({\n  name: \"youtubeapi\",\n  initialState: {\n    videos: [],\n    error: \"\",\n    loading: false\n  },\n  extraReducers: {\n    [getYoutubeVideos.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [getYoutubeVideos.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.videos = [...state.videos, action.payload];\n    },\n    [getYoutubeVideos.rejected]: (state, action) => {\n      state.loading = false;\n    }\n  }\n});\nexport default youtubeSlice.reducer;","map":{"version":3,"sources":["C:/Users/HP/Desktop/PROJECTS/WEB/BUILDS/WEB20(youtube/src/features/redux/youtubeSlice.js"],"names":["createSlice","createAsyncThunk","request","getYoutubeVideos","rejectWithValue","data","params","part","maxResults","pageToken","getState","homeVideos","nextPageToken","q","keyword","type","response","videos","items","category","err","youtubeSlice","name","initialState","error","loading","extraReducers","pending","state","action","fulfilled","payload","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAOC,OAAP,MAAoB,QAApB;AAEA,OAAO,MAAMC,gBAAgB,GAAGF,gBAAgB,CAC5C,6BAD4C,EAE5C,cAA+B;AAAA,MAAxB;AAAEG,IAAAA;AAAF,GAAwB;;AAC3B,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,OAAO,CAAC,SAAD,EAAY;AACtCI,MAAAA,MAAM,EAAE;AACJC,QAAAA,IAAI,EAAE,SADF;AAGJC,QAAAA,UAAU,EAAE,EAHR;AAIJC,QAAAA,SAAS,EAAEC,QAAQ,GAAGC,UAAX,CAAsBC,aAJ7B;AAKJC,QAAAA,CAAC,EAAEC,OALC;AAMJC,QAAAA,IAAI,EAAE;AANF;AAD8B,KAAZ,CAA9B;AAUA,UAAMC,QAAQ,GAAG;AACbC,MAAAA,MAAM,EAAEZ,IAAI,CAACa,KADA;AAEbN,MAAAA,aAAa,EAAEP,IAAI,CAACO,aAFP;AAGbO,MAAAA,QAAQ,EAAE;AAHG,KAAjB;AAMA,WAAOH,QAAP;AACH,GAlBD,CAkBE,OAAOI,GAAP,EAAY;AACV,WAAOhB,eAAe,CAACgB,GAAG,CAACJ,QAAJ,CAAaX,IAAd,CAAtB;AACH;AACJ,CAxB2C,CAAzC;AA4BP,MAAMgB,YAAY,GAAGrB,WAAW,CAAC;AAC7BsB,EAAAA,IAAI,EAAE,YADuB;AAE7BC,EAAAA,YAAY,EAAE;AACVN,IAAAA,MAAM,EAAE,EADE;AAEVO,IAAAA,KAAK,EAAE,EAFG;AAGVC,IAAAA,OAAO,EAAE;AAHC,GAFe;AAO7BC,EAAAA,aAAa,EAAE;AACX,KAACvB,gBAAgB,CAACwB,OAAlB,GAA4B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACH,OAAN,GAAgB,IAAhB;AACH,KAHU;AAIX,KAACtB,gBAAgB,CAAC2B,SAAlB,GAA8B,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC7CD,MAAAA,KAAK,CAACH,OAAN,GAAgB,KAAhB;AACAG,MAAAA,KAAK,CAACX,MAAN,GAAe,CAAC,GAAGW,KAAK,CAACX,MAAV,EAAkBY,MAAM,CAACE,OAAzB,CAAf;AACH,KAPU;AAQX,KAAC5B,gBAAgB,CAAC6B,QAAlB,GAA6B,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACH,OAAN,GAAgB,KAAhB;AACH;AAVU;AAPc,CAAD,CAAhC;AAsBA,eAAeJ,YAAY,CAACY,OAA5B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport request from '../api'\r\n\r\nexport const getYoutubeVideos = createAsyncThunk(\r\n    \"youtubeapi/getYoutubeVideos\",\r\n    async ({ rejectWithValue }) => {\r\n        try {\r\n            const { data } = await request('/videos', {\r\n                params: {\r\n                    part: 'snippet',\r\n\r\n                    maxResults: 20,\r\n                    pageToken: getState().homeVideos.nextPageToken,\r\n                    q: keyword,\r\n                    type: 'video',\r\n                },\r\n            })\r\n            const response = {\r\n                videos: data.items,\r\n                nextPageToken: data.nextPageToken,\r\n                category: 'All',\r\n            }\r\n\r\n            return response;\r\n        } catch (err) {\r\n            return rejectWithValue(err.response.data);\r\n        }\r\n    }\r\n);\r\n\r\n\r\nconst youtubeSlice = createSlice({\r\n    name: \"youtubeapi\",\r\n    initialState: {\r\n        videos: [],\r\n        error: \"\",\r\n        loading: false,\r\n    },\r\n    extraReducers: {\r\n        [getYoutubeVideos.pending]: (state, action) => {\r\n            state.loading = true;\r\n        },\r\n        [getYoutubeVideos.fulfilled]: (state, action) => {\r\n            state.loading = false;\r\n            state.videos = [...state.videos, action.payload];\r\n        },\r\n        [getYoutubeVideos.rejected]: (state, action) => {\r\n            state.loading = false;\r\n        }\r\n    },\r\n});\r\n\r\n\r\nexport default youtubeSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}