{"ast":null,"code":"import { CHANNEL_DETAILS_FAIL, CHANNEL_VIDEOS_REQUEST, CHANNEL_VIDEOS_SUCCESS, HOME_VIDEOS_FAIL, HOME_VIDEOS_REQUEST, HOME_VIDEOS_SUCCESS, RELATED_VIDEO_FAIL, RELATED_VIDEO_REQUEST, RELATED_VIDEO_SUCCESS, SEARCHED_VIDEO_FAIL, SEARCHED_VIDEO_REQUEST, SEARCHED_VIDEO_SUCCESS, SELECTED_VIDEO_FAIL, SELECTED_VIDEO_REQUEST, SELECTED_VIDEO_SUCCESS, SUBSCRIPTIONS_CHANNEL_FAIL, SUBSCRIPTIONS_CHANNEL_REQUEST, SUBSCRIPTIONS_CHANNEL_SUCCESS } from '../actionType';\nimport request from '../../api';\nexport const getPopularVideos = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: HOME_VIDEOS_REQUEST\n    });\n    const {\n      data\n    } = await request('/videos', {\n      params: {\n        part: 'snippet,contentDetails,statistics',\n        chart: 'mostPopular',\n        regionCode: 'IN',\n        maxResults: 20,\n        pageToken: getState().homeVideos.nextPageToken\n      }\n    });\n    dispatch({\n      type: HOME_VIDEOS_SUCCESS,\n      payload: {\n        videos: data.items,\n        nextPageToken: data.nextPageToken,\n        category: 'All'\n      }\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: HOME_VIDEOS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getVideosByCategory = keyword => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: HOME_VIDEOS_REQUEST\n    });\n    const {\n      data\n    } = await request('/search', {\n      params: {\n        part: 'snippet',\n        maxResults: 20,\n        pageToken: getState().homeVideos.nextPageToken,\n        q: keyword,\n        type: 'video'\n      }\n    });\n    dispatch({\n      type: HOME_VIDEOS_SUCCESS,\n      payload: {\n        videos: data.items,\n        nextPageToken: data.nextPageToken,\n        category: keyword\n      }\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: HOME_VIDEOS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getVideoById = id => async dispatch => {\n  try {\n    dispatch({\n      type: SELECTED_VIDEO_REQUEST\n    });\n    const {\n      data\n    } = await request('/videos', {\n      params: {\n        part: 'snippet,statistics',\n        id: id\n      }\n    });\n    dispatch({\n      type: SELECTED_VIDEO_SUCCESS,\n      payload: data.items[0]\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: SELECTED_VIDEO_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getRelatedVideos = id => async dispatch => {\n  try {\n    dispatch({\n      type: RELATED_VIDEO_REQUEST\n    });\n    const {\n      data\n    } = await request('/search', {\n      params: {\n        part: 'snippet',\n        relatedToVideoId: id,\n        maxResults: 15,\n        type: 'video'\n      }\n    });\n    dispatch({\n      type: RELATED_VIDEO_SUCCESS,\n      payload: data.items[0]\n    });\n  } catch (error) {\n    console.log(error.response.data.message);\n    dispatch({\n      type: RELATED_VIDEO_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const getVideosBySearch = keyword => async dispatch => {\n  try {\n    dispatch({\n      type: SEARCHED_VIDEO_REQUEST\n    });\n    const {\n      data\n    } = await request('/search', {\n      params: {\n        part: 'snippet',\n        maxResults: 20,\n        q: keyword,\n        type: 'video,channel'\n      }\n    });\n    dispatch({\n      type: SEARCHED_VIDEO_SUCCESS,\n      payload: data.items\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: SEARCHED_VIDEO_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getSubscribedChannels = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: SUBSCRIPTIONS_CHANNEL_REQUEST\n    });\n    const {\n      data\n    } = await request('/subscriptions', {\n      params: {\n        part: 'snippet,contentDetails',\n        mine: true\n      },\n      headers: {\n        Authorization: `Bearer ${getState().auth.accessToken}`\n      }\n    });\n    dispatch({\n      type: SUBSCRIPTIONS_CHANNEL_SUCCESS,\n      payload: data.items\n    });\n  } catch (error) {\n    console.log(error.response.data);\n    dispatch({\n      type: SUBSCRIPTIONS_CHANNEL_FAIL,\n      payload: error.response.data\n    });\n  }\n};\nexport const getVideosByChannel = id => async dispatch => {\n  try {\n    dispatch({\n      type: CHANNEL_VIDEOS_REQUEST\n    }); // 1. get upload playlist id\n\n    const {\n      data: {\n        items\n      }\n    } = await request('/channels', {\n      params: {\n        part: 'contentDetails',\n        id: id\n      }\n    });\n    const uploadPlaylistId = items[0].contentDetails.relatedPlaylists.uploads; // 2. get the videos using the id\n\n    const {\n      data\n    } = await request('/playlistItems', {\n      params: {\n        part: 'snippet,contentDetails',\n        playlistId: uploadPlaylistId,\n        maxResults: 30\n      }\n    });\n    dispatch({\n      type: CHANNEL_VIDEOS_SUCCESS,\n      payload: data.items\n    });\n  } catch (error) {\n    console.log(error.response.data.message);\n    dispatch({\n      type: CHANNEL_DETAILS_FAIL,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/TB/Desktop/WEB20(youtube/src/redux/actions/videos.action.js"],"names":["CHANNEL_DETAILS_FAIL","CHANNEL_VIDEOS_REQUEST","CHANNEL_VIDEOS_SUCCESS","HOME_VIDEOS_FAIL","HOME_VIDEOS_REQUEST","HOME_VIDEOS_SUCCESS","RELATED_VIDEO_FAIL","RELATED_VIDEO_REQUEST","RELATED_VIDEO_SUCCESS","SEARCHED_VIDEO_FAIL","SEARCHED_VIDEO_REQUEST","SEARCHED_VIDEO_SUCCESS","SELECTED_VIDEO_FAIL","SELECTED_VIDEO_REQUEST","SELECTED_VIDEO_SUCCESS","SUBSCRIPTIONS_CHANNEL_FAIL","SUBSCRIPTIONS_CHANNEL_REQUEST","SUBSCRIPTIONS_CHANNEL_SUCCESS","request","getPopularVideos","dispatch","getState","type","data","params","part","chart","regionCode","maxResults","pageToken","homeVideos","nextPageToken","payload","videos","items","category","error","console","log","message","getVideosByCategory","keyword","q","getVideoById","id","getRelatedVideos","relatedToVideoId","response","getVideosBySearch","getSubscribedChannels","mine","headers","Authorization","auth","accessToken","getVideosByChannel","uploadPlaylistId","contentDetails","relatedPlaylists","uploads","playlistId"],"mappings":"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","sourcesContent":["import {\n   CHANNEL_DETAILS_FAIL,\n   CHANNEL_VIDEOS_REQUEST,\n   CHANNEL_VIDEOS_SUCCESS,\n   HOME_VIDEOS_FAIL,\n   HOME_VIDEOS_REQUEST,\n   HOME_VIDEOS_SUCCESS,\n   RELATED_VIDEO_FAIL,\n   RELATED_VIDEO_REQUEST,\n   RELATED_VIDEO_SUCCESS,\n   SEARCHED_VIDEO_FAIL,\n   SEARCHED_VIDEO_REQUEST,\n   SEARCHED_VIDEO_SUCCESS,\n   SELECTED_VIDEO_FAIL,\n   SELECTED_VIDEO_REQUEST,\n   SELECTED_VIDEO_SUCCESS,\n   SUBSCRIPTIONS_CHANNEL_FAIL,\n   SUBSCRIPTIONS_CHANNEL_REQUEST,\n   SUBSCRIPTIONS_CHANNEL_SUCCESS,\n} from '../actionType'\n\nimport request from '../../api'\n\nexport const getPopularVideos = () => async (dispatch, getState) => {\n   try {\n      dispatch({\n         type: HOME_VIDEOS_REQUEST,\n      })\n      const { data } = await request('/videos', {\n         params: {\n            part: 'snippet,contentDetails,statistics',\n            chart: 'mostPopular',\n            regionCode: 'IN',\n            maxResults: 20,\n            pageToken: getState().homeVideos.nextPageToken,\n         },\n      })\n\n      dispatch({\n         type: HOME_VIDEOS_SUCCESS,\n         payload: {\n            videos: data.items,\n            nextPageToken: data.nextPageToken,\n            category: 'All',\n         },\n      })\n   } catch (error) {\n      console.log(error.message)\n      dispatch({\n         type: HOME_VIDEOS_FAIL,\n         payload: error.message,\n      })\n   }\n}\n\nexport const getVideosByCategory = keyword => async (dispatch, getState) => {\n   try {\n      dispatch({\n         type: HOME_VIDEOS_REQUEST,\n      })\n      const { data } = await request('/search', {\n         params: {\n            part: 'snippet',\n\n            maxResults: 20,\n            pageToken: getState().homeVideos.nextPageToken,\n            q: keyword,\n            type: 'video',\n         },\n      })\n\n      dispatch({\n         type: HOME_VIDEOS_SUCCESS,\n         payload: {\n            videos: data.items,\n            nextPageToken: data.nextPageToken,\n            category: keyword,\n         },\n      })\n   } catch (error) {\n      console.log(error.message)\n      dispatch({\n         type: HOME_VIDEOS_FAIL,\n         payload: error.message,\n      })\n   }\n}\n\nexport const getVideoById = id => async dispatch => {\n   try {\n      dispatch({\n         type: SELECTED_VIDEO_REQUEST,\n      })\n\n      const { data } = await request('/videos', {\n         params: {\n            part: 'snippet,statistics',\n            id: id,\n         },\n      })\n      dispatch({\n         type: SELECTED_VIDEO_SUCCESS,\n         payload: data.items[0],\n      })\n   } catch (error) {\n      console.log(error.message)\n      dispatch({\n         type: SELECTED_VIDEO_FAIL,\n         payload: error.message,\n      })\n   }\n}\n\nexport const getRelatedVideos = id => async dispatch => {\n   try {\n      dispatch({\n         type: RELATED_VIDEO_REQUEST,\n      })\n\n      const { data } = await request('/search', {\n         params: {\n            part: 'snippet',\n            relatedToVideoId: id,\n            maxResults: 15,\n            type: 'video',\n         },\n      })\n      dispatch({\n         type: RELATED_VIDEO_SUCCESS,\n         payload: data.items[0],\n      })\n   } catch (error) {\n      console.log(error.response.data.message)\n      dispatch({\n         type: RELATED_VIDEO_FAIL,\n         payload: error.response.data.message,\n      })\n   }\n}\n\nexport const getVideosBySearch = keyword => async dispatch => {\n   try {\n      dispatch({\n         type: SEARCHED_VIDEO_REQUEST,\n      })\n      const { data } = await request('/search', {\n         params: {\n            part: 'snippet',\n\n            maxResults: 20,\n            q: keyword,\n            type: 'video,channel',\n         },\n      })\n\n      dispatch({\n         type: SEARCHED_VIDEO_SUCCESS,\n         payload: data.items,\n      })\n   } catch (error) {\n      console.log(error.message)\n      dispatch({\n         type: SEARCHED_VIDEO_FAIL,\n         payload: error.message,\n      })\n   }\n}\n\nexport const getSubscribedChannels = () => async (dispatch, getState) => {\n   try {\n      dispatch({\n         type: SUBSCRIPTIONS_CHANNEL_REQUEST,\n      })\n      const { data } = await request('/subscriptions', {\n         params: {\n            part: 'snippet,contentDetails',\n\n            mine: true,\n         },\n         headers: {\n            Authorization: `Bearer ${getState().auth.accessToken}`,\n         },\n      })\n      dispatch({\n         type: SUBSCRIPTIONS_CHANNEL_SUCCESS,\n         payload: data.items,\n      })\n   } catch (error) {\n      console.log(error.response.data)\n      dispatch({\n         type: SUBSCRIPTIONS_CHANNEL_FAIL,\n         payload: error.response.data,\n      })\n   }\n}\n\nexport const getVideosByChannel = id => async dispatch => {\n   try {\n      dispatch({\n         type: CHANNEL_VIDEOS_REQUEST,\n      })\n\n      // 1. get upload playlist id\n      const {\n         data: { items },\n      } = await request('/channels', {\n         params: {\n            part: 'contentDetails',\n            id: id,\n         },\n      })\n      const uploadPlaylistId = items[0].contentDetails.relatedPlaylists.uploads\n      // 2. get the videos using the id\n      const { data } = await request('/playlistItems', {\n         params: {\n            part: 'snippet,contentDetails',\n            playlistId: uploadPlaylistId,\n            maxResults: 30,\n         },\n      })\n\n      dispatch({\n         type: CHANNEL_VIDEOS_SUCCESS,\n         payload: data.items,\n      })\n   } catch (error) {\n      console.log(error.response.data.message)\n      dispatch({\n         type: CHANNEL_DETAILS_FAIL,\n         payload: error.response.data,\n      })\n   }\n}\n"]},"metadata":{},"sourceType":"module"}